<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>元素探索器 - AdsPower管理器</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    body { padding: 20px; }
    #screenshot { max-width: 100%; border: 1px solid #ddd; margin-bottom: 20px; position: relative; }
    .element-item { cursor: pointer; padding: 8px; border-bottom: 1px solid #eee; transition: background-color 0.2s; }
    .element-item:hover { background-color: #f5f5f5; }
    .element-details { font-size: 12px; color: #666; }
    .loading { text-align: center; padding: 20px; }
    .selected { background-color: #e7f3ff !important; }
    .element-highlight { position: absolute; border: 2px solid red; background-color: rgba(255, 0, 0, 0.2); z-index: 100; pointer-events: none; }
    .element-actions { margin-top: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; background-color: #f9f9f9; }
    .refresh-controls { margin-bottom: 15px; }
    
    /* 标签页样式 */
    .tab-item {
      padding: 5px 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-right: 5px;
      cursor: pointer;
      white-space: nowrap;
      font-size: 13px;
      background-color: #f8f9fa;
      max-width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .tab-item:hover {
      background-color: #e9ecef;
    }
    .tab-item.active {
      background-color: #007bff;
      color: white;
      border-color: #007bff;
    }
    .tab-favicon {
      width: 16px;
      height: 16px;
      margin-right: 5px;
      vertical-align: text-bottom;
    }
    
    /* 交互式截图区域样式 */
    #screenshotContainer {
      position: relative;
      overflow: hidden;
    }
    #interactiveLayer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 50;
    }
    .element-overlay {
      position: absolute;
      background-color: rgba(74, 144, 226, 0.3);
      border: 2px solid rgba(74, 144, 226, 0.8);
      z-index: 60;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .element-overlay:hover {
      background-color: rgba(74, 144, 226, 0.5);
    }
    /* 为小型可点击元素添加特殊样式 */
    .element-overlay.small-clickable {
      background-color: rgba(255, 69, 0, 0.4);
      border: 2px solid rgba(255, 69, 0, 0.8);
      z-index: 65; /* 确保小元素在其他元素之上 */
    }
    .element-overlay.small-clickable:hover {
      background-color: rgba(255, 69, 0, 0.6);
    }
    .element-tooltip {
      position: absolute;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 5px 8px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 100;
      pointer-events: none;
      max-width: 300px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .context-menu {
      position: absolute;
      background-color: white;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      z-index: 200;
      overflow: hidden;
    }
    .context-menu-item {
      padding: 8px 12px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .context-menu-item:hover {
      background-color: #f5f5f5;
    }
    .context-menu-divider {
      height: 1px;
      background-color: #ddd;
      margin: 4px 0;
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
      <div class="container-fluid">
        <a class="navbar-brand" href="/">AdsPower管理器</a>
        <span class="navbar-text text-light">
          元素探索器 - 环境 <%= envId %>
        </span>
      </div>
    </nav>

    <div class="row mb-3">
      <div class="col">
        <!-- 刷新控件 -->
        <div class="refresh-controls d-flex align-items-center flex-wrap border-bottom pb-2 mb-2">
          <div class="d-flex">
            <button id="refreshBtn" class="btn btn-primary">
              <i class="fas fa-sync-alt me-1"></i>刷新页面
            </button>
            <button id="backBtn" class="btn btn-secondary ms-2">
              <i class="fas fa-arrow-left me-1"></i>返回主页
            </button>
            <button id="reconnectBtn" class="btn btn-warning ms-2">
              <i class="fas fa-plug me-1"></i>重新连接
            </button>
          </div>
          
          <div class="ms-auto d-flex align-items-center">
            <div class="form-check form-switch me-2">
              <input class="form-check-input" type="checkbox" id="autoRefreshToggle">
              <label class="form-check-label" for="autoRefreshToggle">自动刷新</label>
            </div>
            <select id="refreshInterval" class="form-select form-select-sm" style="width: auto;">
              <option value="2000">2秒</option>
              <option value="5000" selected>5秒</option>
              <option value="10000">10秒</option>
              <option value="30000">30秒</option>
            </select>
          </div>
        </div>
        
        <!-- 标签页切换栏 -->
        <div id="tabsContainer" class="d-flex align-items-center overflow-auto mb-2 py-1" style="min-height: 40px;">
          <div class="me-2 text-muted">标签页:</div>
          <div id="tabsList" class="d-flex">
            <div class="loading small">加载中...</div>
          </div>
        </div>
        
        <!-- 状态信息 -->
        <div class="d-flex justify-content-between align-items-center">
          <span id="pageUrl" class="text-muted">当前页面: 加载中...</span>
          <div>
            <span id="statusMessage" class="text-muted me-2"></span>
            <span id="lastRefresh" class="text-muted small badge bg-light text-dark">-</span>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-8">
        <div id="screenshotContainer" class="mb-3">
          <div class="loading">正在加载截图...</div>
        </div>
        <!-- 右键菜单 -->
        <div id="contextMenu" class="context-menu d-none">
          <div class="context-menu-item" id="menuInspect">查看元素</div>
          <div class="context-menu-divider"></div>
          <div class="context-menu-item" id="menuClick">点击此元素</div>
          <div class="context-menu-item" id="menuHighlight">高亮此元素</div>
          <div class="context-menu-item" id="menuCopySelector">复制选择器</div>
        </div>
        <div id="selectedElementInfo" class="element-actions d-none">
          <h5>元素信息</h5>
          <div id="elementDetails"></div>
          <div class="mt-3">
            <button id="clickElementBtn" class="btn btn-success btn-sm">点击此元素</button>
            <button id="typeTextBtn" class="btn btn-info btn-sm ms-2 d-none">输入文本</button>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card mb-3">
          <div class="card-header">
            元素查找
          </div>
          <div class="card-body">
            <div class="mb-3">
              <input type="text" id="selectorInput" class="form-control" placeholder="输入CSS选择器或文本...">
            </div>
            <div class="d-flex">
              <button id="searchByCssBtn" class="btn btn-primary btn-sm me-2">CSS查找</button>
              <button id="searchByTextBtn" class="btn btn-info btn-sm">文本查找</button>
            </div>
          </div>
        </div>
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>页面元素</span>
            <div>
              <button id="showAllBtn" class="btn btn-sm btn-outline-secondary">所有元素</button>
              <button id="showClickableBtn" class="btn btn-sm btn-outline-primary ms-1">可点击元素</button>
            </div>
          </div>
          <div class="card-body p-0">
            <div id="elementsContainer" style="height: 500px; overflow-y: auto;">
              <div class="loading">正在加载元素...</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 输入文本模态框 -->
  <div class="modal fade" id="textInputModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">输入文本</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="text" id="textToType" class="form-control" placeholder="请输入要输入的文本...">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" id="confirmTypeText">确认</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // 全局变量定义
    const envId = '<%= envId %>';
    let selectedElement = null;
    let allElements = [];
    let isRefreshing = false; // 标记是否正在刷新
    let checkingUrl = false; // 标记是否正在检查URL
    let autoRefreshInterval = null; // 自动刷新间隔
    let lastPageUrl = ''; // 记录最后一次的页面URL
    let autoRefreshTimer = null; // 自动刷新定时器
    let previousElements = []; // 用于比较元素变化
    let requestInProgress = false; // 标记是否有请求正在进行中
    let autoRefreshCount = 0; // 自动刷新计数
    let currentTabId = null; // 当前选中的标签页ID
    let availableTabs = []; // 所有可用的标签页

    // ----- 函数定义区域（按照依赖顺序定义） -----
    
    // 更新状态消息
    function updateStatus(message, isError = false) {
      const status = $('#statusMessage');
      status.text(message);
      
      if (isError) {
        status.addClass('text-danger').removeClass('text-muted');
        console.error('错误:', message);
      } else {
        status.addClass('text-muted').removeClass('text-danger');
      }
      
      // 如果消息不为空，3秒后自动清除（除非是错误消息）
      if (message && !isError) {
        setTimeout(function() {
          if (status.text() === message) {
            status.text('');
          }
        }, 5000);
      }
    }
    
    // 显示连接警告
    function showConnectionAlert() {
      if ($('#connectionAlert').length === 0) {
        const alert = $('<div>', {
          id: 'connectionAlert',
          class: 'alert alert-warning mt-3',
          html: `
            <strong>连接问题</strong>
            <p>无法与浏览器建立连接。这可能是因为:</p>
            <ul>
              <li>浏览器连接已断开</li>
              <li>环境已停止运行</li>
              <li>网络连接问题</li>
            </ul>
            <p>请尝试点击"重新连接"按钮或返回主页检查环境状态。</p>
            <div class="mt-2">
              <button class="btn btn-warning btn-sm" id="alertReconnectBtn">重新连接</button>
              <a href="/" class="btn btn-outline-secondary btn-sm ms-2">返回主页</a>
            </div>
          `
        });
        
        $('#screenshotContainer').append(alert);
        
        // 为警告框中的重连按钮添加事件
        $('#alertReconnectBtn').click(function() {
          $('#connectionAlert').remove();
          reconnectEnvironment();
        });
      }
    }

    // 隐藏连接警告
    function hideConnectionAlert() {
      $('#connectionAlert').remove();
    }
    
    // 更新URL显示
    function updatePageUrl(url) {
      try {
        if (!url) {
          $('#pageUrl').text('无法获取当前URL');
          return;
        }
        
        // 尝试格式化URL
        let displayUrl = url;
        try {
          // 移除可能的协议部分以节省空间
          if (url.startsWith('http://')) {
            displayUrl = url.substring(7);
          } else if (url.startsWith('https://')) {
            displayUrl = url.substring(8);
          }
          
          // 如果URL太长，截断显示
          if (displayUrl.length > 40) {
            displayUrl = displayUrl.substring(0, 37) + '...';
          }
        } catch (e) {
          console.warn('格式化URL出错，使用原始URL:', e);
        }
        
        $('#pageUrl').text(displayUrl);
        console.log('页面URL已更新:', displayUrl);
        
        // 更新lastPageUrl全局变量
        lastPageUrl = url;
      } catch (e) {
        console.error('更新页面URL出错:', e);
        $('#pageUrl').text('URL显示错误');
      }
    }
    
    // 更新截图
    function updateScreenshot(dataUrl) {
      let container = $('#screenshotContainer');
      
      // 清空现有截图
      container.html('');
      
      // 创建新截图
      const screenshot = $('<img>', {
        id: 'screenshot',
        src: dataUrl,
        alt: '页面截图',
        css: {
          maxWidth: '100%',
          height: 'auto'
        }
      });
      
      // 添加加载中指示器
      const loadingIndicator = $('<div>', {
        class: 'position-absolute top-50 start-50 translate-middle',
        html: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">加载中...</span></div>'
      });
      
      container.append(loadingIndicator);
      
      // 添加截图
      container.append(screenshot);
      
      // 添加交互层
      const interactiveLayer = $('<div>', {
        id: 'interactiveLayer'
      });
      
      container.append(interactiveLayer);
      
      // 等待图片完全加载后创建元素覆盖层
      screenshot.on('load', function() {
        console.log('截图已完全加载，尺寸:', screenshot.width(), 'x', screenshot.height());
        loadingIndicator.remove();
        
        // 确保图片已经完全渲染，再创建覆盖层
        setTimeout(createElementOverlays, 100);
      });
      
      // 添加加载超时处理
      setTimeout(function() {
        if (loadingIndicator.parent().length > 0) {
          console.log('截图加载超时，尝试强制创建覆盖层');
          loadingIndicator.remove();
          createElementOverlays();
        }
      }, 3000);
    }
    
    // 获取标签页列表
    function getTabsList() {
      console.log('获取标签页列表');
      
      return new Promise((resolve, reject) => {
        try {
          $.ajax({
            url: `/api/element-explorer/${envId}/tabs`,
            method: 'GET',
            timeout: 10000, // 10秒超时
            success: function(response) {
              if (response.success && response.tabs) {
                console.log('获取到标签页列表:', response.tabs);
                availableTabs = response.tabs;
                updateTabsUI(response.tabs, response.activeTab);
                resolve(response.tabs);
              } else {
                console.warn('获取标签页列表失败:', response.message || '未知错误');
                updateStatus('获取标签页列表失败: ' + (response.message || '未知错误'), true);
                reject(new Error(response.message || '未知错误'));
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              console.error('标签页列表请求失败:', textStatus, errorThrown);
              updateStatus('标签页列表请求失败: ' + textStatus, true);
              reject(new Error(errorThrown || textStatus));
            }
          });
        } catch (e) {
          console.error('获取标签页函数异常:', e);
          reject(e);
        }
      });
    }
    
    // 更新标签页UI
    function updateTabsUI(tabs, activeTab) {
      const tabsList = $('#tabsList');
      tabsList.empty();
      
      if (!tabs || tabs.length === 0) {
        tabsList.append('<div class="text-muted">无可用标签页</div>');
        return;
      }
      
      let activeTabId = null;
      if (activeTab && activeTab.url) {
        // 找到与活跃标签URL匹配的标签页
        for (const tab of tabs) {
          if (tab.url === activeTab.url) {
            activeTabId = tab.id;
            break;
          }
        }
      }
      
      // 如果没有找到活跃标签，使用当前选中的标签或第一个标签
      if (activeTabId === null) {
        activeTabId = currentTabId !== null ? currentTabId : tabs[0].id;
      }
      
      // 更新当前标签ID
      currentTabId = activeTabId;
      
      // 创建标签页项
      tabs.forEach(tab => {
        const tabTitle = tab.title || '无标题';
        const isActive = tab.id === activeTabId;
        
        const tabItem = $('<div>', {
          class: `tab-item ${isActive ? 'active' : ''}`,
          'data-id': tab.id,
          title: `${tabTitle}\n${tab.url}`
        });
        
        // 尝试提取域名作为标签显示
        let displayText = tabTitle;
        try {
          if (tab.url && tab.url.startsWith('http')) {
            const urlObj = new URL(tab.url);
            const domain = urlObj.hostname;
            if (domain) {
              displayText = domain.replace('www.', '');
              if (displayText.length > 15) {
                displayText = displayText.substring(0, 12) + '...';
              }
            }
          }
        } catch (e) {
          // 使用标题作为备用
        }
        
        tabItem.text(displayText);
        
        // 设置点击事件
        tabItem.click(function() {
          switchToTab(tab.id);
        });
        
        tabsList.append(tabItem);
      });
    }
    
    // 切换到指定标签页
    function switchToTab(tabId) {
      if (tabId === currentTabId) {
        console.log(`已经在标签页 ${tabId}，无需切换`);
        return;
      }
      
      console.log(`切换到标签页 ${tabId}`);
      updateStatus(`切换到标签页 ${tabId}...`, false);
      
      // 更新UI状态
      $('.tab-item').removeClass('active');
      $(`.tab-item[data-id="${tabId}"]`).addClass('active');
      
      $.ajax({
        url: `/api/element-explorer/${envId}/switch-tab`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ tabId: tabId }),
        success: function(response) {
          if (response.success) {
            updateStatus('标签页切换成功', false);
            currentTabId = tabId;
            
            // 切换后立即刷新页面内容
            refreshPageData(true);
          } else {
            updateStatus('标签页切换失败: ' + response.message, true);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          updateStatus('标签页切换请求失败: ' + textStatus, true);
          console.error('标签页切换请求失败:', textStatus, errorThrown);
        }
      });
    }
    
    // 获取页面截图
    function getPageScreenshot(forceRefresh = false) {
      console.log('开始获取页面截图，强制刷新:', forceRefresh, '当前标签:', currentTabId);
      
      return new Promise((resolve, reject) => {
        try {
          // 添加加载指示器
          if ($('#screenshotContainer').find('.loading').length === 0) {
            $('#screenshotContainer').append($('<div>', {
              class: 'loading',
              text: forceRefresh ? '强制刷新中...' : '加载中...'
            }));
          }
          
          // 移除现有的错误消息和高亮
          $('#screenshotContainer').find('.error-message, .element-highlight').remove();
          
          // 更新状态
          updateStatus(forceRefresh ? '正在强制刷新页面内容...' : '正在获取页面截图...', false);
          
          // 设置请求超时保护
          let requestTimeout = setTimeout(function() {
            if ($('#screenshotContainer').find('.loading').length > 0) {
              updateStatus('请求超时，请尝试重新连接浏览器', true);
              $('#screenshotContainer').find('.loading').text('加载超时，请点击"重新连接"按钮');
              
              // 显示重新连接提示
              showConnectionAlert();
              console.error('截图请求超时(20秒)');
              reject(new Error('获取截图请求超时'));
            }
          }, 20000); // 20秒超时
          
          // 构建URL参数
          let url = `/api/element-explorer/${envId}/screenshot?forceRefresh=${forceRefresh}`;
          if (currentTabId !== null) {
            url += `&tabId=${currentTabId}&useActiveTab=false`;
          }
          
          console.log('发送截图AJAX请求，URL:', url);
          $.ajax({
            url: url,
            method: 'GET',
            timeout: 30000, // 30秒超时
            success: function(response) {
              clearTimeout(requestTimeout);
              console.log('收到截图响应:', response ? '成功' : '失败');
              
              if (response.success) {
                // 更新截图
                updateScreenshot(response.screenshot);
                $('#screenshotContainer').find('.loading').remove();
                
                // 更新标签页（如果有）
                if (response.tabs && response.tabs.length > 0) {
                  availableTabs = response.tabs;
                  updateTabsUI(response.tabs, { url: response.url });
                }
                
                // 更新元素列表
                if (response.elements && response.elements.length > 0) {
                  updateElementsList(response.elements);
                  updateStatus(`截图获取成功，检测到 ${response.elements.length} 个元素`, false);
                } else {
                  updateStatus('截图获取成功，正在获取页面元素...', false);
                  // 成功获取截图后，尝试获取页面元素
                  getPageElementsWithRetry(3, false, currentTabId);
                }
                
                // 更新页面URL
                if (response.url) {
                  updatePageUrl(response.url);
                }
                
                // 清除连接警告（如果有）
                hideConnectionAlert();
                
                // 成功后解决Promise
                resolve(response);
              } else {
                // 如果不成功但有备用截图，仍然显示
                if (response.screenshot || response.fallbackScreenshot) {
                  updateScreenshot(response.screenshot || response.fallbackScreenshot);
                  $('#screenshotContainer').find('.loading').remove();
                  updateStatus('获取截图部分成功: ' + (response.message || '未知错误'), true);
                  resolve(response); // 部分成功也算成功
                } else {
                  updateStatus('获取截图失败: ' + (response.message || '未知错误'), true);
                  $('#screenshotContainer').find('.loading').remove();
                  $('#screenshotContainer').append($('<div>', {
                    class: 'error-message alert alert-danger',
                    text: '无法获取截图：' + (response.message || '未知错误')
                  }));
                  
                  // 显示连接问题警告
                  showConnectionAlert();
                  reject(new Error(response.message || '未知错误'));
                }
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              clearTimeout(requestTimeout);
              
              console.error('获取截图请求失败:', textStatus, errorThrown);
              updateStatus('获取截图请求失败: ' + textStatus, true);
              
              $('#screenshotContainer').find('.loading').remove();
              $('#screenshotContainer').append($('<div>', {
                class: 'error-message alert alert-danger',
                text: '获取截图失败: ' + textStatus
              }));
              
              // 显示连接问题警告
              showConnectionAlert();
              
              // 清空元素列表
              updateElementsList([]);
              
              reject(new Error(errorThrown || textStatus));
            }
          });
        } catch (e) {
          console.error('截图函数异常:', e);
          reject(e);
        }
      });
    }
    
    // 获取页面元素，带重试功能
    function getPageElementsWithRetry(maxRetries = 3, forceRefresh = false, tabId = null) {
      let retryCount = 0;
      
      function tryGetElements() {
        // 更新元素容器显示加载状态
        $('#elementsContainer').html(`<div class="loading">正在加载元素 (尝试 ${retryCount+1}/${maxRetries})${forceRefresh ? '，强制刷新' : ''}...</div>`);
        
        // 更新状态
        updateStatus(`正在获取页面元素 (尝试 ${retryCount+1}/${maxRetries})${forceRefresh ? '，强制刷新' : ''}...`, false);
        
        // 构建URL参数
        let url = `/api/element-explorer/${envId}/elements?forceRefresh=${forceRefresh}`;
        if (tabId !== null) {
          url += `&tabId=${tabId}&useActiveTab=false`;
        }
        
        $.ajax({
          url: url,
          method: 'GET',
          timeout: 15000, // 15秒超时
          success: function(response) {
            if (response.success && response.elements && response.elements.length > 0) {
              updateElementsList(response.elements);
              updateStatus(`成功加载 ${response.elements.length} 个元素`, false);
            } else {
              if (retryCount < maxRetries - 1) {
                retryCount++;
                const delay = retryCount * 1000; // 递增延迟
                updateStatus(`未找到元素，${delay/1000} 秒后重试...`, true);
                setTimeout(tryGetElements, delay);
              } else {
                $('#elementsContainer').html('<div class="alert alert-warning">未找到可交互元素，请尝试点击"重新连接"按钮或刷新页面</div>');
                updateStatus('无法获取页面元素，请尝试重新连接', true);
              }
            }
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.error('获取元素失败:', textStatus, errorThrown);
            
            if (retryCount < maxRetries - 1) {
              retryCount++;
              const delay = retryCount * 1000; // 递增延迟
              updateStatus(`获取元素失败，${delay/1000} 秒后重试...`, true);
              setTimeout(tryGetElements, delay);
            } else {
              $('#elementsContainer').html('<div class="alert alert-danger">获取元素失败: ' + textStatus + '</div>');
              updateStatus('无法获取页面元素，请尝试重新连接', true);
            }
          }
        });
      }
      
      // 开始第一次尝试
      tryGetElements();
    }
    
    // 更新元素列表
    function updateElementsList(elements) {
      const container = $('#elementsContainer');
      container.empty();
      
      if (!elements || elements.length === 0) {
        container.append($('<div>', {
          class: 'alert alert-info',
          text: '没有找到可交互元素'
        }));
        return;
      }
      
      // 显示元素数量
      container.append($('<div>', {
        class: 'p-2 bg-light',
        text: `发现 ${elements.length} 个元素`
      }));
      
      // 保存所有元素
      allElements = elements;
      
      // 添加元素列表
      elements.forEach(function(element) {
        const item = $('<div>', {
          class: 'element-item',
          'data-id': element.id
        });
        
        // 设置点击事件，选择元素
        item.click(function() {
          $('.element-item').removeClass('selected');
          $(this).addClass('selected');
          selectedElement = element;
          
          // 显示元素信息
          $('#selectedElementInfo').removeClass('d-none');
          
          // 更新元素详情
          let detailsHtml = `
            <div><strong>标签:</strong> ${element.tagName}</div>
            <div><strong>文本:</strong> ${element.text || '(无文本)'}</div>
            <div><strong>选择器:</strong> ${element.selector}</div>
            <div><strong>位置:</strong> X=${Math.round(element.rect.x)}, Y=${Math.round(element.rect.y)}, 宽=${Math.round(element.rect.width)}, 高=${Math.round(element.rect.height)}</div>
          `;
          
          $('#elementDetails').html(detailsHtml);
          
          // 如果是输入框，显示输入文本按钮
          if (element.tagName === 'input' || element.tagName === 'textarea') {
            $('#typeTextBtn').removeClass('d-none');
          } else {
            $('#typeTextBtn').addClass('d-none');
          }
          
          // 高亮显示元素
          highlightElement(element);
        });
        
        // 设置元素内容
        const title = $('<div>', {
          class: 'fw-bold element-title',
          text: element.tagName
        });
        
        const text = $('<div>', {
          class: 'element-text text-truncate',
          text: element.text || '(无文本)'
        });
        
        item.append(title, text);
        container.append(item);
      });
      
      // 更新完元素列表后，创建交互层
      setTimeout(createElementOverlays, 100);
    }
    
    // 高亮显示元素
    function highlightElement(element) {
      // 移除现有的高亮
      $('.element-highlight').remove();
      
      if (!element || !element.rect) return;
      
      // 获取截图比例
      const screenshot = $('#screenshot');
      if (!screenshot.length) return;
      
      const imgNaturalWidth = screenshot[0].naturalWidth;
      const imgNaturalHeight = screenshot[0].naturalHeight;
      const imgDisplayWidth = screenshot.width();
      const imgDisplayHeight = screenshot.height();
      
      // 计算缩放比例
      const scaleX = imgDisplayWidth / imgNaturalWidth;
      const scaleY = imgDisplayHeight / imgNaturalHeight;
      
      // 计算显示坐标
      const displayX = element.rect.x * scaleX;
      const displayY = element.rect.y * scaleY;
      const displayWidth = element.rect.width * scaleX;
      const displayHeight = element.rect.height * scaleY;
      
      // 创建新的高亮元素
      const highlight = $('<div>', {
        class: 'element-highlight'
      });
      
      // 设置高亮位置和大小
      highlight.css({
        left: displayX + 'px',
        top: displayY + 'px',
        width: displayWidth + 'px',
        height: displayHeight + 'px'
      });
      
      // 添加到截图容器
      $('#screenshotContainer').append(highlight);
    }
    
    // 刷新页面数据
    function refreshPageData(forceRefresh = false) {
      try {
        console.log('刷新页面数据开始，强制刷新:', forceRefresh, '当前标签:', currentTabId);
        // 如果已经在刷新中，直接返回
        if (isRefreshing) {
          console.log('已有刷新任务正在进行，跳过本次刷新');
          return;
        }
        
        // 设置刷新状态
        isRefreshing = true;
        
        // 更新状态和时间戳
        let now = new Date();
        $('#lastRefresh').text(now.toLocaleTimeString());
        updateStatus(forceRefresh ? '开始强制刷新页面...' : '开始刷新页面数据...', false);
        
        // 先获取标签页列表，确保标签页信息是最新的
        getTabsList()
          .catch(err => {
            console.warn('获取标签页列表失败，继续刷新页面:', err);
            // 即使获取标签页失败也继续其他操作
          })
          .then(() => {
            // 检查当前标签页的URL
            return checkPageAndRefresh();
          })
          .then(() => {
            console.log('页面检查完成，开始获取截图，强制刷新:', forceRefresh);
            // 获取截图
            return getPageScreenshot(forceRefresh);
          })
          .then(response => {
            console.log('截图获取完成');
            isRefreshing = false;
            
            // 更新交互覆盖层
            setTimeout(createElementOverlays, 200);
          })
          .catch(error => {
            console.error('刷新页面数据出错:', error);
            updateStatus('刷新失败: ' + error.message, true);
            isRefreshing = false;
          });
      } catch (e) {
        console.error('刷新页面函数异常:', e);
        updateStatus('刷新发生异常: ' + e.message, true);
        isRefreshing = false;
      }
    }
    
    // 检查页面URL并根据需要刷新
    function checkPageAndRefresh() {
      return new Promise((resolve, reject) => {
        try {
          // 防止重复检查
          if (checkingUrl) {
            console.log('已有URL检查任务正在进行，跳过');
            resolve();
            return;
          }
          
          checkingUrl = true;
          console.log('开始检查页面URL...');
          
          // 设置超时
          const urlCheckTimeout = setTimeout(() => {
            if (checkingUrl) {
              console.log('URL检查超时');
              checkingUrl = false;
              resolve(); // 超时后继续进行其他操作
            }
          }, 10000); // 10秒超时
          
          // 构建URL参数
          let url = `/api/element-explorer/${envId}/url`;
          if (currentTabId !== null) {
            url += `?tabId=${currentTabId}&useActiveTab=false`;
          }
          
          // 请求当前URL
          $.ajax({
            url: url,
            method: 'GET',
            timeout: 15000,
            success: function(response) {
              clearTimeout(urlCheckTimeout);
              
              if (response.success && response.url) {
                console.log('获取到当前URL:', response.url);
                
                // 更新页面URL显示
                updatePageUrl(response.url);
                
                // 检查URL是否变化
                if (lastPageUrl && lastPageUrl !== response.url) {
                  console.log('URL已变化，从', lastPageUrl, '到', response.url);
                  updateStatus('页面已导航到新URL，刷新数据...', false);
                }
              } else {
                console.warn('获取URL失败:', response.message || '未知错误');
                updateStatus('获取URL失败: ' + (response.message || '未知错误'), true);
              }
              
              checkingUrl = false;
              resolve();
            },
            error: function(jqXHR, textStatus, errorThrown) {
              clearTimeout(urlCheckTimeout);
              console.error('URL请求失败:', textStatus, errorThrown);
              
              checkingUrl = false;
              // 请求失败也继续执行其他操作
              resolve();
            }
          });
        } catch (e) {
          console.error('检查URL函数异常:', e);
          checkingUrl = false;
          resolve(); // 出错也继续其他操作
        }
      });
    }
    
    // 点击元素
    function clickElement(selector, index) {
      updateStatus('正在点击元素...', false);
      
      $.ajax({
        url: `/api/element-explorer/${envId}/click`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          selector: selector,
          index: index || 0
        }),
        success: function(response) {
          if (response.success) {
            updateStatus('元素点击成功', false);
            
            // 延迟刷新页面
            setTimeout(function() {
              refreshPageData();
            }, 1000);
          } else {
            updateStatus('点击元素失败: ' + response.message, true);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          updateStatus('点击元素请求失败: ' + textStatus, true);
          console.error('点击元素请求失败:', textStatus, errorThrown);
        }
      });
    }
    
    // 输入文本
    function typeText(selector, text) {
      updateStatus('正在输入文本...', false);
      
      $.ajax({
        url: `/api/element-explorer/${envId}/type`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          selector: selector,
          text: text
        }),
        success: function(response) {
          if (response.success) {
            updateStatus('文本输入成功', false);
            
            // 延迟刷新页面
            setTimeout(function() {
              refreshPageData();
            }, 1000);
          } else {
            updateStatus('输入文本失败: ' + response.message, true);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          updateStatus('输入文本请求失败: ' + textStatus, true);
          console.error('输入文本请求失败:', textStatus, errorThrown);
        }
      });
    }
    
    // 切换自动刷新
    function toggleAutoRefresh() {
      try {
        // 清除现有的自动刷新间隔
        if (autoRefreshTimer) {
          clearInterval(autoRefreshTimer);
          autoRefreshTimer = null;
          console.log('已清除现有自动刷新定时器');
        }
        
        // 获取是否启用自动刷新
        const autoRefreshEnabled = $('#autoRefreshToggle').prop('checked');
        
        // 如果启用了自动刷新
        if (autoRefreshEnabled) {
          // 获取刷新间隔（毫秒）
          const intervalValue = parseInt($('#refreshInterval').val()) || 5000;
          console.log(`启用自动刷新，间隔: ${intervalValue}毫秒`);
          
          // 存储上次强制刷新的时间
          let lastForceRefreshTime = Date.now();
          
          // 设置刷新间隔
          autoRefreshTimer = setInterval(function() {
            if (!isRefreshing) {
              console.log(`自动刷新触发，间隔: ${intervalValue}毫秒`);
              
              // 计算距离上次强制刷新的时间
              const timeSinceLastForceRefresh = Date.now() - lastForceRefreshTime;
              
              // 每3次自动刷新进行一次强制刷新，或者超过30秒没有强制刷新
              const shouldForceRefresh = 
                (autoRefreshCount % 3 === 0) || 
                (timeSinceLastForceRefresh > 30000);
              
              if (shouldForceRefresh) {
                console.log('触发定期强制刷新');
                lastForceRefreshTime = Date.now();
                refreshPageData(true); // 强制刷新
              } else {
                refreshPageData(false); // 常规刷新
              }
              
              // 增加自动刷新计数
              autoRefreshCount++;
            } else {
              console.log('上一次刷新尚未完成，跳过本次自动刷新');
            }
          }, intervalValue);
          
          updateStatus(`已启用自动刷新，间隔: ${intervalValue/1000}秒`, false);
        } else {
          console.log('已禁用自动刷新');
          updateStatus('已禁用自动刷新', false);
        }
      } catch (e) {
        console.error('切换自动刷新出错:', e);
        updateStatus('设置自动刷新失败: ' + e.message, true);
      }
    }
    
    // 重新连接环境
    function reconnectEnvironment() {
      // 更新状态
      updateStatus('正在重新连接环境...', false);
      $('#screenshotContainer').find('.loading').remove();
      $('#screenshotContainer').append($('<div>', {
        class: 'loading',
        text: '正在重新连接浏览器...'
      }));
      
      // 禁用重连按钮，避免重复点击
      $('#reconnectBtn').prop('disabled', true);
      
      // 发送重连请求
      $.ajax({
        url: `/api/browser/reconnect/${envId}`,
        method: 'POST',
        timeout: 30000,
        success: function(response) {
          if (response.success) {
            updateStatus('重新连接成功，正在刷新页面...', false);
            // 延迟刷新页面数据，给新连接一些初始化时间
            setTimeout(function() {
              refreshPageData();
              
              // 再延迟几秒获取元素，确保浏览器已完全加载
              setTimeout(function() {
                getPageElementsWithRetry(5); // 重连后使用更多重试次数
                $('#reconnectBtn').prop('disabled', false);
              }, 3000);
            }, 2000);
          } else {
            updateStatus(`重新连接失败: ${response.message}`, true);
            $('#reconnectBtn').prop('disabled', false);
            
            // 显示错误提示
            $('#screenshotContainer').find('.loading').remove();
            $('#screenshotContainer').append($('<div>', {
              class: 'error-message alert alert-danger',
              html: `<strong>重新连接失败</strong><br>${response.message}<br><br>请尝试:<br>1. 返回主页检查环境状态<br>2. 重新启动环境<br>3. 刷新页面`
            }));
          }
        },
        error: function(xhr, status, error) {
          updateStatus(`重新连接请求失败: ${error}`, true);
          $('#reconnectBtn').prop('disabled', false);
          
          // 显示错误提示
          $('#screenshotContainer').find('.loading').remove();
          $('#screenshotContainer').append($('<div>', {
            class: 'error-message alert alert-danger',
            html: `<strong>重新连接请求失败</strong><br>${error}<br><br>请尝试:<br>1. 返回主页<br>2. 刷新页面<br>3. 检查网络连接`
          }));
        }
      });
    }
    
    // ----- 页面初始化 -----
    $(document).ready(function() {
      console.log('页面初始化开始...');
      
      try {
        // 初始化全局变量
        let isRefreshing = false;
        let checkingUrl = false;
        let autoRefreshTimer = null;
        let lastPageUrl = '';
        let autoRefreshCount = 0;
        let currentTabId = null;
        let availableTabs = [];
        
        // 初始化页面状态
        $('#pageUrl').text('正在加载...');
        $('#lastRefresh').text('初始化中...');
        
        // 绑定刷新按钮事件
        $('#refreshBtn').click(function() {
          console.log('手动刷新按钮点击 - 强制刷新');
          refreshPageData(true); // 手动刷新时使用强制刷新
        });
        
        // 绑定返回按钮事件
        $('#backBtn').click(function() {
          window.location.href = '/dashboard';
        });
        
        // 绑定重新连接按钮事件
        $('#reconnectBtn').click(function() {
          reconnectEnvironment();
        });
        
        // 绑定自动刷新开关事件
        $('#autoRefreshToggle').change(function() {
          toggleAutoRefresh();
        });
        
        // 绑定刷新间隔选择事件
        $('#refreshInterval').change(function() {
          if ($('#autoRefreshToggle').is(':checked')) {
            toggleAutoRefresh();
          }
        });
        
        // CSS选择器查找
        $('#searchByCssBtn').click(function() {
          const selector = $('#selectorInput').val().trim();
          if (selector) {
            loadElements(selector);
          }
        });
        
        // 文本查找
        $('#searchByTextBtn').click(function() {
          const text = $('#selectorInput').val().trim();
          if (text) {
            searchElementsByText(text);
          }
        });
        
        // 点击元素
        $('#clickElementBtn').click(function() {
          if (selectedElement) {
            clickElement(selectedElement.selector, selectedElement.index);
          }
        });
        
        // 显示所有元素
        $('#showAllBtn').click(function() {
          loadAllElements();
        });
        
        // 显示可点击元素
        $('#showClickableBtn').click(function() {
          loadClickableElements();
        });
        
        // 输入文本
        $('#typeTextBtn').click(function() {
          if (selectedElement && (selectedElement.tagName === 'INPUT' || selectedElement.tagName === 'TEXTAREA')) {
            $('#textInputModal').modal('show');
          }
        });
        
        // 确认输入文本
        $('#confirmTypeText').click(function() {
          const text = $('#textToType').val();
          typeText(selectedElement.selector, text);
          $('#textInputModal').modal('hide');
        });
        
        // 隐藏连接警告
        hideConnectionAlert();
        
        // 初始化元素列表
        updateElementsList([]);
        
        // 延迟启动刷新，给页面DOM完全加载的时间
        setTimeout(function() {
          // 先获取标签页列表
          getTabsList()
            .then(() => {
              // 然后刷新页面数据
              refreshPageData(true);
              console.log('初始页面刷新已触发');
            })
            .catch(error => {
              console.error('初始化加载失败:', error);
              // 即使标签页获取失败也尝试刷新页面
              refreshPageData(true);
            });
        }, 300);
      } catch (error) {
        console.error('初始化错误:', error);
        updateStatus('页面初始化错误: ' + error.message, true);
      }
      
      // 点击文档时隐藏右键菜单
      $(document).on('click', function(e) {
        if (!$(e.target).closest('#contextMenu').length) {
          $('#contextMenu').addClass('d-none');
        }
      });
    });
    
    // 以下是加载完整元素列表的功能
    function loadAllElements() {
      updateElementsList(allElements);
    }
    
    function loadClickableElements() {
      if (!allElements || allElements.length === 0) {
        updateStatus('没有可用元素', true);
        return;
      }
      
      const clickable = allElements.filter(function(el) {
        return el.clickable || 
               el.tagName === 'a' || 
               el.tagName === 'button' || 
               el.tagName === 'input' ||
               (el.attributes && el.attributes.onclick);
      });
      
      updateElementsList(clickable);
    }
    
    function loadElements(selector) {
      updateStatus('正在查找元素...', false);
      
      $.ajax({
        url: `/api/element-explorer/${envId}/query-elements`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ selector: selector }),
        success: function(response) {
          if (response.success && response.elements && response.elements.length > 0) {
            updateElementsList(response.elements);
            updateStatus(`找到 ${response.elements.length} 个匹配的元素`, false);
          } else {
            updateStatus('未找到匹配的元素', true);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          updateStatus('元素查询失败: ' + textStatus, true);
        }
      });
    }
    
    function searchElementsByText(text) {
      updateStatus('正在搜索元素...', false);
      
      $.ajax({
        url: `/api/element-explorer/${envId}/search-text`,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ text: text }),
        success: function(response) {
          if (response.success && response.elements && response.elements.length > 0) {
            updateElementsList(response.elements);
            updateStatus(`找到 ${response.elements.length} 个包含文本的元素`, false);
          } else {
            updateStatus('未找到包含该文本的元素', true);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          updateStatus('文本搜索失败: ' + textStatus, true);
        }
      });
    }
    
    // 创建元素覆盖层
    function createElementOverlays() {
      try {
        // 清除现有的覆盖层
        $('.element-overlay, .element-tooltip').remove();
        
        // 检查是否有元素可用
        if (!allElements || allElements.length === 0) {
          console.log('没有可用元素来创建交互覆盖层');
          return;
        }
        
        const interactiveLayer = $('#interactiveLayer');
        
        // 获取截图比例
        const screenshot = $('#screenshot');
        if (!screenshot.length || !screenshot[0].complete) {
          console.log('截图元素不存在或未完成加载，延迟创建覆盖层');
          setTimeout(createElementOverlays, 300);
          return;
        }
        
        // 获取截图的实际尺寸
        const imgNaturalWidth = screenshot[0].naturalWidth;
        const imgNaturalHeight = screenshot[0].naturalHeight;
        const imgDisplayWidth = screenshot.width();
        const imgDisplayHeight = screenshot.height();
        
        // 获取截图元素的位置偏移
        const screenshotOffset = screenshot.offset();
        const screenshotLeft = screenshotOffset.left;
        const screenshotTop = screenshotOffset.top;
        
        // 计算缩放比例
        const scaleX = imgDisplayWidth / imgNaturalWidth;
        const scaleY = imgDisplayHeight / imgNaturalHeight;
        
        // 调试信息
        console.log(`截图尺寸: 原始(${imgNaturalWidth}x${imgNaturalHeight}) 显示(${imgDisplayWidth}x${imgDisplayHeight})`);
        console.log(`截图位置: left=${screenshotLeft}, top=${screenshotTop}`);
        console.log(`缩放比例: scaleX=${scaleX.toFixed(3)}, scaleY=${scaleY.toFixed(3)}`);
        console.log(`创建元素覆盖层: 共 ${allElements.length} 个元素`);
        
        // 首先处理小型可点击元素，确保它们显示在最上层
        const smallElements = [];
        const normalElements = [];
        
        // 首先分离小型元素和普通元素
        allElements.forEach((element, index) => {
          if (!element.rect) return;
          
          // 调试第一个元素的位置信息
          if (index === 0) {
            console.log(`第一个元素位置: x=${element.rect.x}, y=${element.rect.y}, w=${element.rect.width}, h=${element.rect.height}`);
          }
          
          const isSmallElement = (element.rect.width < 40 || element.rect.height < 40);
          const isIconOrButton = 
            element.tagName === 'button' || 
            element.tagName === 'a' || 
            (element.attributes && (
              element.attributes.class && (/icon|btn/i.test(element.attributes.class)) ||
              element.attributes.role === 'button'
            )) ||
            (element.clickable === true);
          
          if (isSmallElement && isIconOrButton) {
            smallElements.push({element, index});
          } else {
            normalElements.push({element, index});
          }
        });
        
        console.log(`分类结果: ${smallElements.length} 个小元素, ${normalElements.length} 个普通元素`);
        
        // 创建辅助函数，计算元素的显示位置和大小
        function calculateElementDisplay(element) {
          // 确保元素坐标在页面可见区域内
          const displayX = element.rect.x * scaleX;
          const displayY = element.rect.y * scaleY;
          const displayWidth = element.rect.width * scaleX;
          const displayHeight = element.rect.height * scaleY;
          
          return {
            left: displayX,
            top: displayY,
            width: displayWidth,
            height: displayHeight
          };
        }
        
        // 先渲染普通元素
        normalElements.forEach(({element, index}) => {
          if (element.rect.width < 5 || element.rect.height < 5) {
            return; // 忽略太小的元素
          }
          
          // 计算显示位置和大小
          const display = calculateElementDisplay(element);
          
          // 创建覆盖元素
          const overlay = $('<div>', {
            class: 'element-overlay',
            'data-element-id': index
          });
          
          // 设置位置和大小
          overlay.css({
            left: display.left + 'px',
            top: display.top + 'px',
            width: display.width + 'px',
            height: display.height + 'px'
          });
          
          // 添加事件处理
          bindOverlayEvents(overlay, element, index);
          
          interactiveLayer.append(overlay);
        });
        
        // 然后渲染小型可点击元素（确保它们在最上层）
        smallElements.forEach(({element, index}) => {
          // 计算显示位置和大小
          const display = calculateElementDisplay(element);
          
          // 为小元素确保最小尺寸
          const displayWidth = Math.max(display.width, 20); // 最小宽度20px
          const displayHeight = Math.max(display.height, 20); // 最小高度20px
          
          // 创建覆盖元素
          const overlay = $('<div>', {
            class: 'element-overlay small-clickable',
            'data-element-id': index,
            title: `${element.tagName}${element.text ? ': ' + element.text : ''}`
          });
          
          // 设置位置和大小
          overlay.css({
            left: display.left + 'px',
            top: display.top + 'px',
            width: displayWidth + 'px',
            height: displayHeight + 'px'
          });
          
          // 调试特定元素的位置
          if (element.tagName === 'a' || /icon/i.test(element.attributes?.class || '')) {
            console.log(`位置调试 [${element.tagName}]: 原始(${element.rect.x},${element.rect.y}) -> 显示(${display.left},${display.top})`);
          }
          
          // 添加事件处理
          bindOverlayEvents(overlay, element, index);
          
          interactiveLayer.append(overlay);
        });
        
        // 添加调试按钮（仅在开发时使用）
        if ($('#debugOverlaysBtn').length === 0) {
          const debugBtn = $('<button>', {
            id: 'debugOverlaysBtn',
            class: 'btn btn-sm btn-danger position-absolute',
            text: '切换元素边框',
            css: {
              top: '5px',
              right: '5px',
              zIndex: 1000,
              opacity: 0.7
            }
          });
          
          debugBtn.click(function() {
            $('.element-overlay').toggleClass('debug-visible');
          });
          
          // 添加调试时的样式
          if ($('#debugOverlayStyles').length === 0) {
            $('head').append(`
              <style id="debugOverlayStyles">
                .element-overlay.debug-visible {
                  background-color: rgba(255, 0, 0, 0.3) !important;
                  border: 2px solid red !important;
                  z-index: 1000 !important;
                }
                .element-overlay.small-clickable.debug-visible {
                  background-color: rgba(0, 255, 0, 0.5) !important;
                  border: 2px solid lime !important;
                }
              </style>
            `);
          }
          
          $('#screenshotContainer').append(debugBtn);
        }
      } catch (e) {
        console.error('创建元素覆盖层出错:', e);
      }
    }
    
    // 提取事件绑定逻辑到单独的函数
    function bindOverlayEvents(overlay, element, index) {
      // 鼠标悬停事件
      overlay.on('mouseenter', function(e) {
        showElementTooltip(element, e);
      });
      
      overlay.on('mouseleave', function() {
        $('.element-tooltip').remove();
      });
      
      // 点击事件
      overlay.on('click', function(e) {
        e.preventDefault();
        selectElementById(index);
      });
      
      // 右键菜单事件
      overlay.on('contextmenu', function(e) {
        e.preventDefault();
        selectElementById(index);
        showContextMenu(e, element);
      });
    }
    
    // 增强元素提示信息的显示
    function showElementTooltip(element, event) {
      // 移除现有的提示
      $('.element-tooltip').remove();
      
      // 创建提示元素
      const tooltip = $('<div>', {
        class: 'element-tooltip'
      });
      
      // 设置提示内容
      const tagName = element.tagName || '未知元素';
      const text = element.text ? (element.text.length > 30 ? element.text.substring(0, 30) + '...' : element.text) : '(无文本)';
      
      // 添加更详细的提示信息
      let tooltipHtml = `<strong>${tagName}</strong>`;
      
      // 添加文本内容
      if (text && text !== '(无文本)') {
        tooltipHtml += `: ${text}`;
      }
      
      // 为小元素显示更多属性信息
      if (element.rect.width < 40 || element.rect.height < 40) {
        // 添加可能有用的属性
        if (element.attributes) {
          if (element.attributes.title) {
            tooltipHtml += `<br>标题: ${element.attributes.title}`;
          }
          if (element.attributes.alt) {
            tooltipHtml += `<br>Alt: ${element.attributes.alt}`;
          }
          if (element.attributes.role) {
            tooltipHtml += `<br>角色: ${element.attributes.role}`;
          }
          if (element.attributes.href) {
            tooltipHtml += `<br>链接: ${element.attributes.href.substring(0, 30)}${element.attributes.href.length > 30 ? '...' : ''}`;
          }
        }
        
        // 添加是否可点击的提示
        if (element.clickable) {
          tooltipHtml += '<br><span style="color: #00ff00;">✓ 可点击</span>';
        }
      }
      
      tooltip.html(tooltipHtml);
      
      // 设置位置
      tooltip.css({
        left: (event.pageX + 10) + 'px',
        top: (event.pageY + 10) + 'px'
      });
      
      // 添加到页面
      $('body').append(tooltip);
      
      // 确保提示不超出视口
      const tooltipRight = tooltip.offset().left + tooltip.outerWidth();
      const viewportRight = $(window).width();
      
      if (tooltipRight > viewportRight) {
        tooltip.css('left', (event.pageX - tooltip.outerWidth() - 10) + 'px');
      }
    }
    
    // 通过ID选择元素
    function selectElementById(id) {
      if (id >= 0 && id < allElements.length) {
        const element = allElements[id];
        
        // 更新选中状态
        $('.element-item').removeClass('selected');
        $(`.element-item[data-id="${element.id}"]`).addClass('selected');
        
        // 更新选中元素
        selectedElement = element;
        
        // 显示元素信息
        $('#selectedElementInfo').removeClass('d-none');
        
        // 更新元素详情
        let detailsHtml = `
          <div><strong>标签:</strong> ${element.tagName}</div>
          <div><strong>文本:</strong> ${element.text || '(无文本)'}</div>
          <div><strong>选择器:</strong> ${element.selector}</div>
          <div><strong>位置:</strong> X=${Math.round(element.rect.x)}, Y=${Math.round(element.rect.y)}, 宽=${Math.round(element.rect.width)}, 高=${Math.round(element.rect.height)}</div>
        `;
        
        $('#elementDetails').html(detailsHtml);
        
        // 如果是输入框，显示输入文本按钮
        if (element.tagName === 'input' || element.tagName === 'textarea') {
          $('#typeTextBtn').removeClass('d-none');
        } else {
          $('#typeTextBtn').addClass('d-none');
        }
        
        // 滚动到元素列表中的项
        const elementItem = $(`.element-item[data-id="${element.id}"]`);
        if (elementItem.length) {
          $('#elementsContainer').scrollTop(
            elementItem.offset().top - $('#elementsContainer').offset().top + $('#elementsContainer').scrollTop()
          );
        }
        
        return true;
      }
      
      return false;
    }
    
    // 修改右键菜单显示
    function showContextMenu(event, element) {
      const contextMenu = $('#contextMenu');
      
      // 设置菜单位置
      contextMenu.css({
        display: 'block',
        left: event.pageX + 'px',
        top: event.pageY + 'px'
      }).removeClass('d-none');
      
      // 针对不同类型的元素自定义菜单项文本
      if (element.tagName === 'input' || element.tagName === 'textarea') {
        $('#menuClick').text('填写此输入框');
      } else if (element.rect.width < 40 || element.rect.height < 40) {
        // 对于小型元素，明确是图标或按钮
        if (/icon/i.test(element.attributes?.class || '')) {
          $('#menuClick').text('点击此图标');
        } else {
          $('#menuClick').text('点击此按钮');
        }
      } else {
        $('#menuClick').text('点击此元素');
      }
      
      // 绑定菜单项事件
      $('#menuInspect').off('click').on('click', function() {
        contextMenu.addClass('d-none');
        // 已经在selectElementById中处理了
      });
      
      $('#menuClick').off('click').on('click', function() {
        contextMenu.addClass('d-none');
        if (element.tagName === 'input' || element.tagName === 'textarea') {
          $('#textInputModal').modal('show');
        } else {
          clickElement(element.selector, element.index);
        }
      });
      
      $('#menuHighlight').off('click').on('click', function() {
        contextMenu.addClass('d-none');
        highlightElement(element);
      });
      
      $('#menuCopySelector').off('click').on('click', function() {
        contextMenu.addClass('d-none');
        navigator.clipboard.writeText(element.selector)
          .then(() => updateStatus('已复制选择器到剪贴板', false))
          .catch(err => updateStatus('复制选择器失败: ' + err, true));
      });
      
      // 点击其他地方关闭菜单
      $(document).one('click', function() {
        contextMenu.addClass('d-none');
      });
    }
  </script>
</body>
</html>
